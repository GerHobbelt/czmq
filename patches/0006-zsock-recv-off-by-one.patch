From: Luca Boccassi <luca.boccassi@gmail.com>
Date: Sun, 17 Apr 2016 18:45:59 +0100
Subject: Problem: zsock_recv casts away u32/u64's last bit

Solution: use strtoul[l] instead of atol[l]. The latter(s) parse
signed integers, so the last bit is lost.
---
 src/zsock.c | 24 +++++++++++++++---------
 1 file changed, 15 insertions(+), 9 deletions(-)

diff --git a/src/zsock.c b/src/zsock.c
index a236f4b..0a09dd4 100644
--- a/src/zsock.c
+++ b/src/zsock.c
@@ -829,7 +829,7 @@ zsock_vrecv (void *self, const char *picture, va_list argptr)
             char *string = zmsg_popstr (msg);
             uint32_t *uint32_p = va_arg (argptr, uint32_t *);
             if (uint32_p)
-                *uint32_p = string? (uint32_t) atol (string): 0;
+                *uint32_p = string? (uint32_t) strtoul (string, NULL, 10): 0;
             free (string);
         }
         else
@@ -837,7 +837,7 @@ zsock_vrecv (void *self, const char *picture, va_list argptr)
             char *string = zmsg_popstr (msg);
             uint64_t *uint64_p = va_arg (argptr, uint64_t *);
             if (uint64_p)
-                *uint64_p = string? (uint64_t) atoll (string): 0;
+                *uint64_p = string? (uint64_t) strtoull (string, NULL, 10): 0;
             free (string);
         }
         else
@@ -845,7 +845,7 @@ zsock_vrecv (void *self, const char *picture, va_list argptr)
             char *string = zmsg_popstr (msg);
             uint *uint_p = va_arg (argptr, uint *);
             if (uint_p)
-                *uint_p = string? (uint) atol (string): 0;
+                *uint_p = string? (uint) strtoul (string, NULL, 10): 0;
             free (string);
         }
         else
@@ -1636,7 +1636,9 @@ zsock_test (bool verbose)
     uint8_t  number1 = 123;
     uint16_t number2 = 123 * 123;
     uint32_t number4 = 123 * 123 * 123;
+    uint64_t number4_MAX = UINT32_MAX;
     uint64_t number8 = 123 * 123 * 123 * 123;
+    uint64_t number8_MAX = UINT64_MAX;
 
     zchunk_t *chunk = zchunk_new ("HELLO", 5);
     assert (chunk);
@@ -1652,8 +1654,9 @@ zsock_test (bool verbose)
     char *original = "pointer";
 
     //  Test zsock_recv into each supported type
-    zsock_send (writer, "i1248zsbcfUhp",
-                -12345, number1, number2, number4, number8,
+    zsock_send (writer, "i124488zsbcfUhp",
+                -12345, number1, number2, number4, number4_MAX,
+                number8, number8_MAX,
                 "This is a string", "ABCDE", 5,
                 chunk, frame, uuid, hash, original);
     char *uuid_str = strdup (zuuid_str (uuid));
@@ -1666,16 +1669,19 @@ zsock_test (bool verbose)
     byte *data;
     size_t size;
     char *pointer;
-    number8 = number4 = number2 = number1 = 0;
-    rc = zsock_recv (reader, "i1248zsbcfUhp",
-                     &integer, &number1, &number2, &number4, &number8,
-                     &string, &data, &size, &chunk, &frame, &uuid, &hash, &pointer);
+    number8_MAX = number8 = number4 = number2 = number1 = 0;
+    rc = zsock_recv (reader, "i124488zsbcfUhp",
+                     &integer, &number1, &number2, &number4, &number4_MAX,
+                     &number8, &number8_MAX, &string, &data, &size, &chunk,
+                     &frame, &uuid, &hash, &pointer);
     assert (rc == 0);
     assert (integer == -12345);
     assert (number1 == 123);
     assert (number2 == 123 * 123);
     assert (number4 == 123 * 123 * 123);
+    assert (number4_MAX == UINT32_MAX);
     assert (number8 == 123 * 123 * 123 * 123);
+    assert (number8_MAX == UINT64_MAX);
     assert (streq (string, "This is a string"));
     assert (memcmp (data, "ABCDE", 5) == 0);
     assert (size == 5);
