From: Eric Wulf <wulf@nrl.navy.mil>
Date: Tue, 28 Jul 2015 09:32:37 -0400
Subject: Pass zsock_t instead of handle to zsock_resolve aware functions to
 reduce huge OSX overhead to getsockopt

---
 src/zframe.c |  4 ++--
 src/zmsg.c   | 14 +++++---------
 src/zproxy.c |  2 +-
 src/zsock.c  |  2 +-
 4 files changed, 9 insertions(+), 13 deletions(-)

diff --git a/src/zframe.c b/src/zframe.c
index ab92e63..35a6dad 100644
--- a/src/zframe.c
+++ b/src/zframe.c
@@ -121,7 +121,7 @@ zframe_recv (void *source)
             zframe_destroy (&self);
             return NULL;            //  Interrupted or terminated
         }
-        self->more = zsock_rcvmore (handle);
+        self->more = zsock_rcvmore (source);
     }
     return self;
 }
@@ -407,7 +407,7 @@ zframe_recv_nowait (void *source)
             zframe_destroy (&self);
             return NULL;            //  Interrupted or terminated
         }
-        self->more = zsock_rcvmore (handle);
+        self->more = zsock_rcvmore (source);
     }
     return self;
 }
diff --git a/src/zmsg.c b/src/zmsg.c
index 99dee8a..dc4f182 100644
--- a/src/zmsg.c
+++ b/src/zmsg.c
@@ -100,9 +100,8 @@ zmsg_recv (void *source)
     if (!self)
         return NULL;
 
-    void *handle = zsock_resolve (source);
     while (true) {
-        zframe_t *frame = zframe_recv (handle);
+        zframe_t *frame = zframe_recv (source);
         if (!frame) {
             zmsg_destroy (&self);
             break;              //  Interrupted or terminated
@@ -111,7 +110,7 @@ zmsg_recv (void *source)
             zmsg_destroy (&self);
             break;
         }
-        if (!zsock_rcvmore (handle))
+        if (!zsock_rcvmore (source))
             break;              //  Last message frame
     }
     return self;
@@ -132,12 +131,11 @@ zmsg_send (zmsg_t **self_p, void *dest)
     zmsg_t *self = *self_p;
 
     int rc = 0;
-    void *handle = zsock_resolve (dest);
     if (self) {
         assert (zmsg_is (self));
         zframe_t *frame = (zframe_t *) zlist_pop (self->frames);
         while (frame) {
-            rc = zframe_send (&frame, handle,
+            rc = zframe_send (&frame, dest,
                               zlist_size (self->frames) ? ZFRAME_MORE : 0);
             if (rc != 0)
                 break;
@@ -162,12 +160,11 @@ CZMQ_EXPORT int
     zmsg_t *self = *self_p;
 
     int rc = 0;
-    void *handle = zsock_resolve (dest);
     if (self) {
         assert (zmsg_is (self));
         zframe_t *frame = (zframe_t *) zlist_pop (self->frames);
         while (frame) {
-            rc = zframe_send (&frame, handle,ZFRAME_MORE);
+            rc = zframe_send (&frame, dest, ZFRAME_MORE);
             if (rc != 0)
                 break;
             frame = (zframe_t *) zlist_pop (self->frames);
@@ -853,9 +850,8 @@ zmsg_recv_nowait (void *source)
     if (!self)
         return NULL;
 
-    void *handle = zsock_resolve (source);
     while (true) {
-        zframe_t *frame = zframe_recv_nowait (handle);
+        zframe_t *frame = zframe_recv_nowait (source);
         if (!frame) {
             zmsg_destroy (&self);
             break;              //  Interrupted or terminated
diff --git a/src/zproxy.c b/src/zproxy.c
index 1e9f212..8b37687 100644
--- a/src/zproxy.c
+++ b/src/zproxy.c
@@ -197,7 +197,7 @@ s_self_switch (self_t *self, zsock_t *input, zsock_t *output)
     while (true) {
         if (zmq_recvmsg (zmq_input, &msg, ZMQ_DONTWAIT) == -1)
             break;      //  Presumably EAGAIN
-        int send_flags = zsock_rcvmore (zmq_input)? ZMQ_SNDMORE: 0;
+        int send_flags = zsock_rcvmore (input)? ZMQ_SNDMORE: 0;
         if (zmq_capture) {
             zmq_msg_t dup;
             zmq_msg_init (&dup);
diff --git a/src/zsock.c b/src/zsock.c
index 1a6b5c5..6e7399c 100644
--- a/src/zsock.c
+++ b/src/zsock.c
@@ -1243,7 +1243,7 @@ zsock_bsend (void *self, const char *picture, ...)
     unsigned int frame_nbr;
     for (frame_nbr = 0; frame_nbr < nbr_frames; frame_nbr++) {
         bool more = frame_nbr < nbr_frames - 1;
-        zframe_send (&frames [frame_nbr], handle,
+        zframe_send (&frames [frame_nbr], self,
                      ZFRAME_REUSE + (more? ZFRAME_MORE: 0));
     }
     return 0;
